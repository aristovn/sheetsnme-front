/** Usage

  <div class='limit-width columns-1-3'>
    <div class='sm-hide md-hide'>
      <div class='bg-dominant-20'>Sidebar</div>
    </div>
    <div class='grid-3 md-grid-3 sm-grid-2'>
      <div class='bg-dominant-20'>Item</div>
      <div class='bg-dominant-20'>Item</div>
      <div class='bg-dominant-20'>Item</div>
    </div>
  </div>
  <div class='limit-width'>
    <div class='grid-4 md-grid-3 sm-grid-2'>
      <div class='bg-dominant-20'>Item</div>
      <div class='bg-dominant-20'>Item</div>
      <div class='bg-dominant-20'>Item</div>
      <div class='bg-dominant-20'>Item</div>
    </div>
  </div>

*/


@function get-width($n, $space) {
  @return if(
    $space > 0,
    calc((100% - (#{$space} * #{$n - 1})) / #{$n}),
    calc(100% / #{$n})
  );
}

@function get-full-width($first, $second, $space) {
  $n: $first + $second;
  $width: if(
    $space > 0,
    '((100% - (#{$space} * #{$n - 1})) / #{$n})',
    '(100% / #{$n})'
  );
  @return calc(#{$first} * #{$width} + #{$space * ($first - 1)});
}

@mixin grid {
  display: flex;
  flex-wrap: wrap;
}

@mixin grid-children($n, $space-h: 1rem, $space-v: 1rem) {
  > * {
    flex-basis: auto;

    width: get-width($n, $space-h);

    @if $n > 0 {
      // For rule overriding on another media breakpoints
      // &:not(:nth-last-child(-n+#{$n})) {
      //   margin-bottom: 0;
      // }
      // // Last $n elements
      // &:not(:nth-last-child(-n+#{$n})) {
      //   margin-bottom: $space-v;
      // }

      margin-bottom: $space-v;

      // For rule overriding on another media breakpoints
      &:not(:nth-child(-n)):not(:last-child) {
        margin-right: 0;
      }
      // Every $nth element
      &:not(:nth-child(#{$n}n)):not(:last-child) {
        margin-right: $space-h;
      }
    }
    @elseif $n == 1 {
      &:not(:last-child) {
        margin-bottom: $space-v;
      }
    }
  }
}

// .grid-2 {
//   @include grid;
//   @include grid-children(2, $grid-space-lg-h, $grid-space-lg-v);
// }

@mixin columns($first, $second, $space-h: 1rem) {
  display: flex;

  > :first-child {
    // width: calc(#{$first} * #{get-width($first + $second, $space)} + #{$space * ($first - 1)});
    width: #{get-full-width($first, $second, $space-h)};
    margin-right: $space-h;
  }

  > :last-child {
    flex: 1;
  }
}

// .columns-1-2 {
//   @include columns(1, 2, $columns-space-lg-h);
// }

// .lg-columns-1-2 {
//   @include media-lg {
//     @include columns(1, 2, $columns-space-lg-h);
//   }
// }

@function get-grid-width($cols, $gaps, $width) {
  @return calc(#{$gaps} * (#{$width} - 1) + (100% - (#{$cols} - 1) * #{$gaps}) / #{$cols} * #{$width});
}

.grid12,
.grid10,
.grid7 {
  @extend .gaps-h-1x25;
}

.grid12-2 {
  width: #{get-grid-width(12, 1.25rem, 2)};
}

.grid12-3 {
  width: #{get-grid-width(12, 1.25rem, 3)};
}

.grid12-5 {
  width: #{get-grid-width(12, 1.25rem, 5)};
}

.grid12-7 {
  width: #{get-grid-width(12, 1.25rem, 7)};
}

.grid12-10 {
  width: #{get-grid-width(12, 1.25rem, 10)};
}

.grid10-3 {
  width: #{get-grid-width(10, 1.25rem, 3)};
}

.grid10-7 {
  width: #{get-grid-width(10, 1.25rem, 7)};
}

.grid7-2 {
  width: #{get-grid-width(7, 1.25rem, 2)};
}

.grid7-4 {
  width: #{get-grid-width(7, 1.25rem, 4)};
}
